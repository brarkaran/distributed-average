apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbit
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbit
  template:
    metadata:
      labels:
        app: rabbit
    spec:
      containers:
        - name: rabbit
          image: rabbitmq:3.8.5-management
          # env:
          #   - name: RABBITMQ_DEFAULT_USER
          #     valueFrom:
          #       secretKeyRef:
          #         name: rabbit-secret
          #         key: RABBITMQ_DEFAULT_USER
          #   - name: RABBITMQ_DEFAULT_PASS
          #     valueFrom:
          #       secretKeyRef:
          #         name: rabbit-secret
          #         key: RABBITMQ_DEFAULT_PASS
          ports:
            - containerPort: 5672
            - containerPort: 15672
---
apiVersion: v1
kind: Service
metadata:
  name: rabbit
spec:
  selector:
    app: rabbit
  ports:
    - name: amqp # Name for the port 5672
      protocol: TCP
      port: 5672
      targetPort: 5672
    - name: management # Name for the port 15672
      protocol: TCP
      port: 15672
      targetPort: 15672
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      serviceAccountName: api-service-account
      containers:
        - name: api
          image: neoatom/api:latest
          command:
            - "node"
            - "build/index.js"
          env:
            - name: NODE_ENV
              value: "production"
            - name: RABBIT_HOST
              value: "amqp://guest:guest@rabbit:5672"
            - name: PORT
              value: "8000"
            - name: AWS_REGION
              value: "us-east-1"
            - name: AWS_BUCKET_NAME
              value: "codebucker"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-secret
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-secret
                  key: AWS_SECRET_ACCESS_KEY

          ports:
            - containerPort: 8000
      imagePullSecrets:
        - name: regcred

---
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: workers
# spec:
#   replicas: 5
#   selector:
#     matchLabels:
#       app: workers
#   template:
#     metadata:
#       labels:
#         app: workers
#     spec:
#       containers:
#         - name: workers
#           image: neoatom/workers:latest
#           env:
#             - name: API_HOST
#               value: "http://api:8000"
#             - name: PYTHONUNBUFFERED
#               value: "1"
#             - name: AWS_REGION
#               value: "us-east-1"
#             - name: AWS_BUCKET_NAME
#               value: "codebucker"
#             - name: AWS_ACCESS_KEY_ID
#               valueFrom:
#                 secretKeyRef:
#                   name: aws-secret
#                   key: AWS_ACCESS_KEY_ID
#             - name: AWS_SECRET_ACCESS_KEY
#               valueFrom:
#                 secretKeyRef:
#                   name: aws-secret
#                   key: AWS_SECRET_ACCESS_KEY
#       imagePullSecrets:
#         - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: neoatom/frontend:latest
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
---
# TODO: this should not live here since it's cluster wide
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: karan@karanbrar.io
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  
spec:
  tls:  
  - hosts:
    - api.ephemeron.io
    - queue.ephemeron.io
    - distributed.ephemeron.io
    secretName: ephemeron-tls-secret
  rules:
    - host: api.ephemeron.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: api
                port:
                  number: 8000
    - host: queue.ephemeron.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rabbit
                port:
                  number: 15672
    - host: distributed.ephemeron.io
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: frontend
              port:
                number: 80



